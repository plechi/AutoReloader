/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package at.plechinger.autoreloader;

import at.plechinger.autoreloader.server.ChangeServer;
import at.plechinger.autoreloader.watcher.ChangeListener;
import at.plechinger.autoreloader.watcher.ChangeType;
import at.plechinger.autoreloader.watcher.DirectoryChangeWatcher;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggingEvent;

/**
 *
 * @author Lukas
 */
public class AutoReloaderGUI extends javax.swing.JFrame implements ChangeListener {

  private static final Color red = new Color(255, 102, 102);
  private static final Color green = new Color(0, 204, 0);

  private static final int port = 25083;

  private static Logger LOG = Logger.getLogger(AutoReloaderGUI.class);

  private Thread watchThread = null;

  private ChangeServer server;

  /**
   * Creates new form AutoReloaderGUI
   */
  public AutoReloaderGUI() {
    initComponents();

    jTextField1.setText(Settings.getInstance().getSelectedDirectory().getAbsolutePath());

    jLabel3.setText("Watcher disabled");
    jLabel3.setBackground(red);

    Logger.getRootLogger().addAppender(new AppenderSkeleton() {

      @Override
      protected void append(LoggingEvent event) {
        jTextArea1.append(event.getRenderedMessage() + "\n");
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
      }

      @Override
      public void close() {
        //do nothing
      }

      @Override
      public boolean requiresLayout() {
        return true;
      }
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel3 = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jPanel2 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    jButton1 = new javax.swing.JButton();
    jToggleButton1 = new javax.swing.JToggleButton();
    jLabel3 = new javax.swing.JLabel();
    jButton2 = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Plechi's Auto Reloader 1.0");
    setIconImages(null);
    setMinimumSize(new java.awt.Dimension(620, 480));
    setPreferredSize(new java.awt.Dimension(620, 480));

    jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
    jPanel3.setLayout(new java.awt.BorderLayout());

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Logging"));
    jPanel1.setLayout(new java.awt.BorderLayout());

    jTextArea1.setEditable(false);
    jTextArea1.setColumns(20);
    jTextArea1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
    jTextArea1.setLineWrap(true);
    jTextArea1.setRows(5);
    jScrollPane1.setViewportView(jTextArea1);

    jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

    jPanel2.setLayout(new java.awt.GridBagLayout());

    jLabel2.setText("Directory");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 7;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 30);
    jPanel2.add(jLabel2, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 140;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel2.add(jTextField1, gridBagConstraints);

    jButton1.setText("Select Folder");
    jButton1.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentResized(java.awt.event.ComponentEvent evt) {
        onResize(evt);
      }
    });
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onSelect(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.ipadx = 7;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel2.add(jButton1, gridBagConstraints);

    jToggleButton1.setText("Watch");
    jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onWatch(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.ipadx = 7;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel2.add(jToggleButton1, gridBagConstraints);

    jLabel3.setBackground(new java.awt.Color(0, 204, 0));
    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel3.setText("Watching stopped");
    jLabel3.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 7;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel2.add(jLabel3, gridBagConstraints);

    jButton2.setText("Snippet");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onSnippet(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.ipadx = 7;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel2.add(jButton2, gridBagConstraints);

    jPanel3.add(jPanel2, java.awt.BorderLayout.PAGE_START);

    getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void onSnippet(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSnippet
    ScriptDialog sd = new ScriptDialog(this, true);
    sd.setPort(port);
    sd.setVisible(true);
  }//GEN-LAST:event_onSnippet

  private void onSelect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelect
    JFileChooser fc = new JFileChooser();
    fc.setMultiSelectionEnabled(false);
    fc.setCurrentDirectory(Settings.getInstance().getSelectedDirectory());
    fc.setFileSelectionMode(fc.DIRECTORIES_ONLY);
    fc.showOpenDialog(this);

    if (fc.getSelectedFile() != null) {
      jTextField1.setText(fc.getSelectedFile().getAbsolutePath());
      Settings.getInstance().setSelectedDirectory(fc.getSelectedFile());
    }

  }//GEN-LAST:event_onSelect

  private void onWatch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onWatch
    if (jToggleButton1.isSelected()) {
      LOG.info("Start watching...");
      File folder = new File(jTextField1.getText());
      if (folder.exists()) {
        try {
          DirectoryChangeWatcher watcher = new DirectoryChangeWatcher(folder, true);
          watcher.addChangeListener(this);
          watchThread = new Thread(watcher);
          watchThread.start();
          jLabel3.setText("Watcher enabled");
          jLabel3.setBackground(green);

          LOG.info("Start Server on port " + port);
          server = new ChangeServer(port);
          server.start();
        } catch (IOException ex) {
          LOG.error("Error while tried to init Watcher.", ex);
        }
      }
    } else {
      LOG.info("Stop watching...");
      jLabel3.setText("Watcher disabled");
      jLabel3.setBackground(red);
      if (watchThread != null) {
        watchThread.interrupt();
      }
      LOG.info("Watching stopped.");
      try {
        server.stop();
      } catch (IOException ex) {
        java.util.logging.Logger.getLogger(AutoReloaderGUI.class.getName()).log(Level.SEVERE, null, ex);
      } catch (InterruptedException ex) {
        java.util.logging.Logger.getLogger(AutoReloaderGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
  }//GEN-LAST:event_onWatch

  private void onResize(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_onResize
    // TODO add your handling code here:
  }//GEN-LAST:event_onResize

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new AutoReloaderGUI().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JToggleButton jToggleButton1;
  // End of variables declaration//GEN-END:variables

  private long lastTime = 0L;

  @Override
  public void onChange(File file, ChangeType type) {
    long currentTime = System.currentTimeMillis();
    if ((lastTime + 5000) < currentTime) {
      LOG.info("Send reload...");
      server.updateClients();
      lastTime = currentTime;
    }

  }
}
